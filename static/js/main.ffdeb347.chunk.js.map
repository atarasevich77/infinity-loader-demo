{"version":3,"sources":["api/api.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","process","timeout","responseType","App","useState","data","setData","isLoading","setIsLoading","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","useEffect","forEach","e","addEventListener","removeEventListener","getData","api","get","then","response","catch","error","console","log","length","requests","i","all","responses","responsesData","map","errors","className","obj","index","key","alt","id","src","url","toString","role","aria-hidden","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"ySAGeA,MAAMC,OAAO,CACxBC,QAAS,gCACTC,QAAS,CACL,YAAaC,wCAEjBC,QAAS,IACTC,aAAc,S,MC8EHC,MAlFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACJC,EADI,KACEC,EADF,OAEuBF,oBAAS,GAFhC,mBAEJG,EAFI,KAEOC,EAFP,KAkBX,SAASC,IAIDC,OAAOC,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cACzFP,GAAa,GAjBjBQ,qBAAU,WACN,CAAC,SAAU,aAAaC,SAAQ,SAASC,GAErC,OADAR,OAAOS,iBAAiBD,EAAGT,GACpB,kBAAMC,OAAOU,oBAAoBF,EAAGT,SAEhD,IAEHO,qBAAU,WACDT,GACLc,MACD,CAACd,IAUJ,IAAMc,EAAU,WACZb,GAAa,GACbc,EAAIC,IAAI,iBACHC,MAAK,SAAUC,GACZnB,EAAQ,GAAD,mBAAKD,GAAL,CAAWoB,EAASpB,KAAK,MAChCG,GAAa,MAEhBkB,OAAM,SAAUC,GACbC,QAAQC,IAAIF,OAKxB,GAAoB,IAAhBtB,EAAKyB,OAAc,CAEnB,IADA,IAAIC,EAAW,GACNC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAQ,sBAAOA,GAAP,CAAiBT,EAAIC,IAAI,mBAErC3B,IAAMqC,IAAIF,GAAUP,MAAK,SAAAU,GACrB,IAAIC,EAAgB,GACpBD,EAAUE,KAAI,SAAAX,GAAQ,OAClBU,EAAa,sBAAOA,GAAP,CAAsBV,EAASpB,KAAK,QAErDC,EAAQ6B,MACTT,OAAM,SAAAW,GACLT,QAAQC,IAAIQ,MAIpB,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,OAEPjC,EAAK+B,KAAI,SAACG,EAAKC,GAAN,OACL,yBAAKC,IAAKD,EAAOF,UAAU,QACvB,yBAAKA,UAAU,aACX,yBACII,IAAKH,EAAII,GACTL,UAAU,eACVM,IAAKL,EAAIM,OAGhBtC,EAAUuC,WACVvC,GACG,0BAAO+B,UAAU,mCAAmCS,KAAK,SAASC,cAAY,iBChE9FC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMmC,c","file":"static/js/main.ffdeb347.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.thecatapi.com/v1/',\r\n    headers: {\r\n        'x-api-key': process.env.REACT_APP_THE_CAT_API_KEY\r\n    },\r\n    timeout: 2000,\r\n    responseType: 'json'\r\n});","import React, {useEffect, useState} from 'react';\nimport api from './api/api';\nimport axios from \"axios\";\nimport './App.css';\n\nfunction App() {\n    const [data, setData] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // start a function (addEventListener) from useEffect hook after rendering\n    // https://ru.reactjs.org/docs/hooks-reference.html#useeffect\n    useEffect(() => {\n        ['scroll', 'touchmove'].forEach(function(e) {\n            window.addEventListener(e, handleScroll);\n            return () => window.removeEventListener(e, handleScroll);\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!isLoading) return;\n        getData();\n    }, [isLoading]);\n\n    function handleScroll() {\n        //window.innerHeight - Height of window screen in pixels\n        //document.documentElement.scrollTop - set of px scrolling from top to bottom a DOM element\n        //document.documentElement.offsetHeight - height of a DOM element\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight) return;\n        setIsLoading(true);\n    }\n\n    const getData = () => {\n        setIsLoading(true);\n        api.get('images/search')\n            .then(function (response) {\n                setData([...data, response.data[0]]);\n                setIsLoading(false);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    //initial data fill out. Start with 3 images\n    if (data.length === 0) {\n        let requests = [];\n        for (let i = 0; i < 3; i++) {\n            requests = [...requests, api.get('images/search')];\n        }\n        axios.all(requests).then(responses => {\n            let responsesData = [];\n            responses.map(response =>\n                responsesData = [...responsesData, response.data[0]]\n            )\n            setData(responsesData);\n        }).catch(errors => {\n            console.log(errors);\n        })\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col\">\n                    {\n                        data.map((obj, index) =>\n                            <div key={index} className=\"card\">\n                                <div className=\"card-body\">\n                                    <img\n                                        alt={obj.id}\n                                        className=\"card-img-top\"\n                                        src={obj.url}\n                                    />\n                                </div>\n                                {isLoading.toString()}\n                                {isLoading &&\n                                    <span  className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                }\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}